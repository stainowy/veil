
#[header="sys/socket.h"]
foreign fn socket(af: i32, typ: i32, proto: i32) -> i32;
#[header="sys/socket.h"]
foreign fn bind(sock: i32, addr: rawptr, len: i32) -> i32;
#[header="sys/socket.h"]
foreign fn listen(sock: i32, backlog: i32) -> i32;
#[header="sys/socket.h"]
foreign fn accept(sock: i32, addr: rawptr, len: rawptr) -> i32;
#[header="sys/socket.h"]
foreign fn recv(sock: i32, buf: rawptr, len: i32, flags: i32) -> i32;
#[header="sys/socket.h"]
foreign fn send(sock: i32, buf: rawptr, len: i32, flags: i32) -> i32;
#[header="unistd.h"]
foreign fn close(fd: i32) -> i32;



#[header="stdio.h"]
foreign fn fopen(filename: string, mode: string) -> rawptr;
#[header="stdio.h"]
foreign fn fread(ptr: rawptr, size: i32, count: i32, stream: rawptr) -> i32;
#[header="stdio.h"]
foreign fn fclose(stream: rawptr) -> i32;
#[header="stdio.h"]
foreign fn fseek(stream: rawptr, offset: i32, whence: i32) -> i32;
#[header="stdio.h"]
foreign fn ftell(stream: rawptr) -> i32;

foreign fn ve_arena_alloc(size: size_t) -> rawptr;

fn read_file_to_string(path: string, max_len: i32) -> string {
    let file = fopen(path, "r");
    if file == 0 as rawptr { return ""; }
    
    fseek(file, 0, 2);
    let file_size = ftell(file);
    fseek(file, 0, 0);
    
    if file_size <= 0 || file_size >= max_len {
        fclose(file);
        return "";
    }
    
    let buf = ve_arena_alloc(max_len);
    let bytes_read = fread(buf, 1, file_size, file);
    fclose(file);
    
    if bytes_read <= 0 { return ""; }
    buf[bytes_read] = 0;
    return buf as string;
}

fn extract_version_from_cargo_toml(cargo: string) -> string {
    let c = cargo as rawptr;
    let i = 0;
    let start = -1;
    let end = -1;
    let found = 0;
    while c[i] != 0 && found == 0 {
        if c[i] == 118 && c[i+1] == 101 && c[i+2] == 114 && c[i+3] == 115 && c[i+4] == 105 && c[i+5] == 111 && c[i+6] == 110 {
            let j = i + 7;
            while c[j] != 0 && (c[j] == 32 || c[j] == 61) { j = j + 1; }
            if c[j] == 34 {
                start = j + 1;
                end = start;
                while c[end] != 0 && c[end] != 34 { end = end + 1; }
                found = 1;
            }
        }
        i = i + 1;
    }
    if start != -1 && end != -1 && end > start {
        let ver = ve_arena_alloc(32);
        let k = 0;
        let p = start;
        while p < end {
            ver[k] = c[p];
            k = k + 1;
            p = p + 1;
        }
        ver[k] = 0;
        return ver as string;
    }
    return "unknown";
}

fn replace_version_placeholder(html: string, version: string) -> string {
    let h = html as rawptr;
    let v = version as rawptr;
    let out = ve_arena_alloc(8192);
    let i = 0;
    let j = 0;
    while h[i] != 0 {
        if h[i] == 123 && h[i+1] == 123 && h[i+2] == 86 && h[i+3] == 69 && h[i+4] == 82 && h[i+5] == 83 && h[i+6] == 73 && h[i+7] == 79 && h[i+8] == 78 && h[i+9] == 125 && h[i+10] == 125 {
            let k = 0;
            while v[k] != 0 {
                out[j] = v[k];
                j = j + 1;
                k = k + 1;
            }
            i = i + 11;
        } else {
            out[j] = h[i];
            i = i + 1;
            j = j + 1;
        }
    }
    out[j] = 0;
    return out as string;
}

fn parse_path(req: rawptr, req_len: i32, path_buf: rawptr) -> i32 {
    let path_len = 0;
    let i = 0;
    let state = 0;
    let done = false;
    let idx = 0;
    while idx < req_len && !done {
        let c = req[idx];
        if state == 0 {
            if c == 32 { state = 1; }
        } else if state == 1 {
            if c == 32 || c == 13 || c == 10 {
                done = true;
            } else {
                path_buf[path_len] = c;
                path_len = path_len + 1;
            }
        }
        idx = idx + 1;
    }
    return path_len;
}

fn route_path_dynamic(path_buf: rawptr, path_len: i32) -> string {
    if path_len == 1 && path_buf[0] == 47 {
        return "docs/index.html";
    }
    if path_len > 1 {
        let fname = ve_arena_alloc(128);
        let k = 0;
        fname[0] = 100; fname[1] = 111; fname[2] = 99; fname[3] = 115; fname[4] = 47;
        k = 5;
        let m = 1;
        let found_dot = 0;
        while m < path_len && k < 127 {
            if path_buf[m] == 46 {
                found_dot = 1;
            } else {
                fname[k] = path_buf[m];
                k = k + 1;
            }
            m = m + 1;
        }        fname[k] = 0;
        if fname[0] != 0 && found_dot == 0 {
            fname[k] = 46; fname[k+1] = 104; fname[k+2] = 116; fname[k+3] = 109; fname[k+4] = 108; fname[k+5] = 0;
            return fname as string;
        }
    }
    return "docs/index.html";
}

export fn serve_docs() {
    let sock = socket(2, 1, 6);
    let addr = ve_arena_alloc(16);
    addr[0] = 2;
    addr[1] = 0;
    addr[2] = 31;
    addr[3] = 144;
    addr[4] = 0;
    addr[5] = 0;
    addr[6] = 0;
    addr[7] = 0;
    bind(sock, addr, 16);
    listen(sock, 10);

    while true {
        let client = accept(sock, 0 as rawptr, 0 as rawptr);
        let req = ve_arena_alloc(1024);
        let req_len = recv(client, req, 1024, 0);        let path_buf = ve_arena_alloc(256);        let path_len = parse_path(req, req_len, path_buf);
        let file_name = "";
        let is_index = 0;
        if path_len == 1 && path_buf[0] == 47 {
            file_name = "docs/index.html";
            is_index = 1;
        } else if path_len > 1 {
            let fname = ve_arena_alloc(128);
            let k = 0;
            fname[0] = 100; fname[1] = 111; fname[2] = 99; fname[3] = 115; fname[4] = 47;
            k = 5;
            let m = 1;
            let found_dot = 0;
            while m < path_len && k < 127 {
                if path_buf[m] == 46 {
                    found_dot = 1;
                } else {
                    fname[k] = path_buf[m];
                    k = k + 1;
                }
                m = m + 1;
            }            fname[k] = 0;
            if fname[0] != 0 && found_dot == 0 {
                fname[k] = 46; fname[k+1] = 104; fname[k+2] = 116; fname[k+3] = 109; fname[k+4] = 108; fname[k+5] = 0;
                file_name = fname as string;
            } else {
                file_name = "";
            }
        }
        if is_index == 1 {
            let html = read_file_to_string("docs/index.html", 32768);
            let cargo = read_file_to_string("Cargo.toml", 2048);            let version = extract_version_from_cargo_toml(cargo);
            let html2 = replace_version_placeholder(html, version);
            let header = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n";
            let header_ptr = header as rawptr;
            send(client, header_ptr, strlen(header), 0);
            send(client, html2 as rawptr, strlen(html2), 0);        } else if file_name != "" {
            let file_content = read_file_to_string(file_name, 32768);
            if file_content != "" {
                let header = "HTTP/1.1 200 OK\r\nContent-Type: text/html\r\n\r\n";
                let header_ptr = header as rawptr;
                send(client, header_ptr, strlen(header), 0);
                send(client, file_content as rawptr, strlen(file_content), 0);
            } else {
                let error_html = read_file_to_string("docs/404.html", 4096);
                if error_html != "" {
                    let header = "HTTP/1.1 404 Not Found\r\nContent-Type: text/html\r\n\r\n";
                    let header_ptr = header as rawptr;
                    send(client, header_ptr, strlen(header), 0);
                    send(client, error_html as rawptr, strlen(error_html), 0);
                } else {
                    let response = "HTTP/1.1 404 Not Found\r\nContent-Type: text/html\r\n\r\n<html><body><h1>404 Not Found</h1></body></html>";
                    let response_ptr = response as rawptr;
                    send(client, response_ptr, strlen(response), 0);
                }
            }
        } else {
            let error_html = read_file_to_string("docs/404.html", 4096);
            if error_html != "" {
                let header = "HTTP/1.1 404 Not Found\r\nContent-Type: text/html\r\n\r\n";
                let header_ptr = header as rawptr;
                send(client, header_ptr, strlen(header), 0);
                send(client, error_html as rawptr, strlen(error_html), 0);
            } else {
                let response = "HTTP/1.1 404 Not Found\r\nContent-Type: text/html\r\n\r\n<html><body><h1>404 Not Found</h1></body></html>";
                let response_ptr = response as rawptr;
                send(client, response_ptr, strlen(response), 0);
            }        }
        close(client);
    }
}

fn strlen(s: string) -> i32 {
    let p = s as rawptr;
    let i = 0;
    while p[i] != 0 { i = i + 1; }
    return i;
}

fn main() {
    serve_docs();
}
